
msgpack - A pure Tcl implementation of the MessagePack object serialization library
Generated from file '' by tcllib/doctools with format 'text'
msgpack(n) 2.1.0  "A pure Tcl implementation of the MessagePack object serialization library"

NAME
====

msgpack - msgpack Package Reference

SYNOPSIS
========

package require Tcl 8.6
package require msgpack ?2.1.0?

msgpack::packer new
packerObject data
packerObject destroy
packerObject pack type ?value?
packerObject pack_list list
packerObject reset
msgpack::unpacker new
unpackerObject destroy
unpackerObject unpack_stream istream callback
unpackerObject unpack_string istring ?callback?
msgpack array2list 
msgpack map2array 
msgpack map2dict 
msgpack pack list
msgpack unpack string

DESCRIPTION
===========

The _msgpack_ package is a pure Tcl implementation the MessagePack object
serialization library. You can find the wrapper code at GitHub:
<URL:https://github.com/jdc8/msgpack>. MessagePack can be found at
<URL:http://msgpack.org/>.

Use this documentation in combination with the MessagePack documentation for
more details.

Packer class
============

    msgpack::packer new

        _oo::class_ <URL:http://www.tcl.tk/man/tcl8.6/TclCmd/class.htm>
        implementing the MessagePack packing.

    packerObject data

        Return the packed data.

    packerObject destroy

        Destroy the packer object.

    packerObject pack type ?value?

        Pack the specified value as type and store it internally. More
        information on how to specify values to be packed can be found in
        section -> Pack options.

    packerObject pack_list list

        Pack the specified list of (nested) key/value pair and store it
        internally.

    packerObject reset

        Reset the packer.

Unpacker class
==============

    msgpack::unpacker new

        _oo::class_ <URL:http://www.tcl.tk/man/tcl8.6/TclCmd/class.htm>
        implementing the MessagePack unpacking.

    unpackerObject destroy

        Destroy the unpacker object.

    unpackerObject unpack_stream istream callback

        Unpack data read from the istream argument. The callback command is
        called when a MessagePack object is unpacked. Before calling the
        callback command, the word _data_ and the unpacked MessagePack object is
        _lappend_-ed to the command. When the stream is closed (_eof_ detected),
        the callback command is called with the word _eof_ and the stream handle
        _lappend_-ed.

        The istream is configure like this:

        *   Non blocking

        *   Unbuffered

        *   Translation _binary_

        Encoding _binary_

        Opening and closing the istream is the responsability of the script
        calling the unpack_stream method.

    unpackerObject unpack_string istring ?callback?

        Unpack the specified data. If no callback command is specified, a list
        with unpacked type (see below) and value pairs is returned. If a
        callback command is specified, this command is called when a MessagePack
        object is unpacked. Before calling the callback command, the word _data_
        and the unpacked MessagePack object is _lappend_-ed to the command.

Type information found in the unpacked MessagePack objects can be one of the
following:

    array

    bin

    boolean

    double

    float

    integer

    map

    nil

    string

    unsigned

Values can be nested type/value list.

Utilities
=========

    msgpack array2list

        Convert a MessagePack array as retuned by the unpack command or method
        into a Tcl list.

    msgpack map2array

        Convert a MessagePack map as retuned by the unpack command or method
        into a Tcl array.

    msgpack map2dict

        Convert a MessagePack map as retuned by the unpack command or method
        into a Tcl dict.

    msgpack pack list

        Pack the specified list of type and value pairs. The packed value is
        returned.

    msgpack unpack string

        3 Unpack the specified data. A list with unpacked type (see -> Unpacker
        class) and value pairs is returned.

Pack options
============

The arguments for the pack command or method are always one or more type
specifiers and if needed a value. The list below shows the supported types:

    array size

        Add array size to packed data. Must be followed by size calls to method
        pack to add the array elements to the packed data.

    boolean data

        Add a boolean to the packed data. Is equivalent calling methods pack
        true or pack false.

    double data

        Add a 64 bit double to the packed data.

    false

        Add a boolean with value false to the packed data.

    fix_numpos data

        Add a snall positive integer to the packed data.

    fix_numneg data

        Add a small negative integer to the packed data.

    fix_int8 data

        Add an 8 bit integer to the packed data.

    fix_int16 data

        Add a 16 bit integer to the packed data.

    fix_int32 data

        Add a 32 bit integer to the packed data.

    fix_int64 data

        Add a 64 bit integer to the packed data.

    fix_uint8 data

        Add an 8 bit unsigned integer to the packed data.

    fix_uint16 data

        Add a 16 bit unsigned integer to the packed data.

    fix_uint32 data

        Add a 32 bit unsigned integer to the packed data.

    fix_uint64 data

        Add a 64 bit unsigned integer to the packed data.

    float data

        Add a 32 bit float to the packed data.

    integer data

        Add an integer to the packed data, let the packer choose the best
        packing.

    unsigned data

        Add an unsigned integer to the packed data, let the packer choose the
        best packing.

    map size

        Add the map size to the packed data. Must be followed by size pairs of
        calls to method pack to add the keys and values to the packed data.

    nil

        Add a nil to the packed data.

    bin size

        Add the size of a bin body to the packed data. Must precede a call to
        method pack bin_body.

    bin_body data

        Add bin data to the packed data. Must be preceded by a call to method
        pack bin.

    short data

        Add a short integer to the packed data.

    string string

        Add a string to the packed data. Is equivalent to calling methods pack
        string and pack string_body.

    true

        Add a boolean with value true to the packed data.

Examples
========

Creating a *msgpack::packer* object and packing some data:

| package require msgpack

| set p [msgpack::packer new]

| $p pack integer 123456789
| $p pack string "A MessagePack example"
| set packed_data [$p data]
| $p destroy

Now unpack the packed data using a *msgpack::packer* object:

| package require msgpack

| set u [msgpack::unpacker new]
| $u unpack_string $packed_data

| $u destroy

After unpacking, the following list of type/value pairs is returned by the
unpack_string method:

| {integer 123456789} {string {A MessagePack example}}

The same example using the pack utility function for packing the data:

| set packed_data ""
| append packed_data [msgpack pack int 0xFFFFFFFF]
| append packed_data [msgpack pack string "A Utility example"]

An using the unpack utility function to unpack the data:

| puts [msgpack unpack $packed_data]

After unpacking, the following list of type/value pairs is returned by the
unpack utility function:

| {integer 4294967295} {string {A Utility example}}

Bugs, ideas, feedback
=====================

This document, and the package it describes, will undoubtedly contain bugs and
other problems. Please report such at the _Github tracker_
<URL:https://github.com/jdc8/msgpack/issues>. Please also report any ideas for
enhancements you may have for either package and/or documentation.

License
=======

The wrapper code is relased under the BSD license (specifically Modified BSD aka
New BSD aka 3-clause BSD). Check COPYING.BSD for more info about the license
used for this wrapper.

KEYWORDS
========

MessagePack, msgpack, serialization

CATEGORY
========

Serialization

COPYRIGHT
=========

Copyright (c) Jos Decoster <jos.decoster@gmail.com>
